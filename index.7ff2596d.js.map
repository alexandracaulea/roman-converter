{"mappings":"AAAO,MAAMA,EAAiBC,SAASC,cAAc,qBACxCC,EAAcF,SAASC,cAAc,cACrCE,EAAmBH,SAASC,cAAc,sBAC1CG,EAAYJ,SAASC,cAAc,eACnCI,EAAqBL,SAASC,cAAc,0BAC5CK,EAAmBN,SAASC,cAAc,gBCL1CM,EAAgB,CAAC,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,KACnFC,EAAkB,CAAC,IAAM,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,YC2BnEC,EAAgBC,GAC9B,GAAyB,IAArBC,UAAUC,OACd,OAAOC,OAAOH,YAGAI,EAAaJ,GAC3B,GAAyB,IAArBC,UAAUC,OAAc,OAE5B,MAAMG,EAAaN,EAAgBC,GACnC,OAAIK,EAAa,GACRA,EAAWC,SAAS,EAAG,GAEzBD,WAGOE,EAAeC,GAC7B,GAAyB,IAArBP,UAAUC,OAAc,OAE5B,IAAIG,EAAa,GACjB,IAAK,IAAII,EAAI,EAAGA,EAAIX,EAAgBI,OAAQO,IAAC,KACpCX,EAAgBW,IAAMD,GAC3BH,GAAcR,EAAcY,GAC5BD,GAASV,EAAgBW,GAG7B,OAAOJ,WAGOK,EAAgBC,EAAWC,GACzCnB,EAAiBoB,aAAaF,EAAWC,GACzCpB,EAAYqB,aAAaF,EAAWC,GACpClB,EAAUmB,aAAaF,EAAWC,GAG7B,MAAME,EAAkB,KAC7B,MAAMC,EAAc,IAAIC,KAClBC,EAAab,EAAaW,EAAYG,WACtCC,EAAef,EAAaW,EAAYK,WAAa,GACrDC,EAActB,EAAgBgB,EAAYO,eAC1CC,EAAa,GAAMN,KAAcE,KAAgBE,IACvD1B,EAAmB6B,YAAcD,EACjC5B,EAAmBkB,aAAa,WAAU,GAAKQ,KAAeF,KAAgBF,KAC9ErB,EAAiB4B,qBA5DgBT,EAAaU,GAC9C,GAAyB,IAArBxB,UAAUC,OAAc,OAC5B,IAAKwB,MAAMC,QAAQZ,GAAc,OAEjC,IAAIV,EAAa,GACjB,IAAK,IAAII,EAAI,EAAGA,EAAIM,EAAYb,OAAQO,IAAK,CAC3C,IAAK,IAAImB,EAAI,EAAGA,EAAI9B,EAAgBI,OAAQ0B,IAAC,KACpC9B,EAAgB8B,IAAMb,EAAYN,IACvCJ,GAAcR,EAAc+B,GAC5Bb,EAAYN,IAAMX,EAAgB8B,GAGtCvB,EAAaA,EAAWwB,OAAOJ,GAGjC,OADepB,EAAWyB,UAAU,EAAGzB,EAAWH,OAAS,GA8C5B6B,CAAmB,CAACd,EAAYE,EAAcE,GAAc,KAC3FhC,EAAeuB,MAAQG,EAAYG,UACnCzB,EAAiB+B,YAAcjB,EAAeU,ICrEnCe,EAAiB,KAC5B3C,EAAeuB,MAAQ,GACvBnB,EAAiB+B,YAAc,GAC/Bd,EAAgB,UAAU,IAGfuB,EAAoBC,IAC/B,IAAIC,EAAaD,EAAEE,OAAOxB,MAE1B,GAAmB,KAAfuB,EAAJ,CAGO,GAAE,UAAYE,KAAKF,KAA0C,GAA3BA,EAAWG,OAAM,MAIxD,OAHAH,EAAaA,EAAWI,QAAO,aAAe,IAC9ClD,EAAeuB,MAAQuB,OACvB1C,EAAiB+C,UAAYjC,EAAe4B,IAG9CzB,EAAgB,UAAU,GAC1BjB,EAAiB+C,UAAYjC,EAAe4B,QAT1CzB,EAAgB,UAAU,ICR5B+B,OAAOC,iBAAiB,mBAAoB5B,KAC5CzB,EAAeqD,iBAAiB,QAAST,GACzCzC,EAAYkD,iBAAiB,QAASV","sources":["src/js/elements.js","src/js/numbers.js","src/js/utils.js","src/js/handlers.js","src/js/app.js"],"sourcesContent":["export const converterInput = document.querySelector(\".converter__input\");\nexport const closeButton = document.querySelector(\".close-btn\");\nexport const resultConversion = document.querySelector(\".converter__result\");\nexport const equalSign = document.querySelector(\".equal-sign\");\nexport const currentDateNumeral = document.querySelector(\".date__numeral-current\");\nexport const currentDateRoman = document.querySelector(\".date__roman\");\n","export const ROMAN_NUMBERS = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"];\nexport const DECIMAL_NUMBERS = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n","import { ROMAN_NUMBERS, DECIMAL_NUMBERS } from \"./numbers\";\nimport {\n  currentDateNumeral,\n  currentDateRoman,\n  converterInput,\n  resultConversion,\n  equalSign,\n  closeButton,\n} from \"./elements\";\n\nexport function convertDateToRoman(currentDate, delimiter) {\n  if (arguments.length !== 2) return;\n  if (!Array.isArray(currentDate)) return;\n\n  let stringDate = \"\";\n  for (let i = 0; i < currentDate.length; i++) {\n    for (let j = 0; j < DECIMAL_NUMBERS.length; j++) {\n      while (DECIMAL_NUMBERS[j] <= currentDate[i]) {\n        stringDate += ROMAN_NUMBERS[j];\n        currentDate[i] -= DECIMAL_NUMBERS[j];\n      }\n    }\n    stringDate = stringDate.concat(delimiter);\n  }\n  const result = stringDate.substring(0, stringDate.length - 1);\n  return result;\n}\n\nexport function convertToString(date) {\n  if (arguments.length !== 1) return;\n  return String(date);\n}\n\nexport function padBeginning(date) {\n  if (arguments.length !== 1) return;\n\n  const stringDate = convertToString(date);\n  if (stringDate < 10) {\n    return stringDate.padStart(2, 0);\n  }\n  return stringDate;\n}\n\nexport function convertToRoman(input) {\n  if (arguments.length !== 1) return;\n\n  let stringDate = \"\";\n  for (let i = 0; i < DECIMAL_NUMBERS.length; i++) {\n    while (DECIMAL_NUMBERS[i] <= input) {\n      stringDate += ROMAN_NUMBERS[i];\n      input -= DECIMAL_NUMBERS[i];\n    }\n  }\n  return stringDate;\n}\n\nexport function showInformation(attribute, value) {\n  resultConversion.setAttribute(attribute, value);\n  closeButton.setAttribute(attribute, value);\n  equalSign.setAttribute(attribute, value);\n}\n\nexport const displayCurrentDate = () => {\n  const currentDate = new Date();\n  const currentDay = padBeginning(currentDate.getDate());\n  const currentMonth = padBeginning(currentDate.getMonth() + 1);\n  const currentYear = convertToString(currentDate.getFullYear());\n  const dateToDisplay = `${currentDay}.${currentMonth}.${currentYear}`;\n  currentDateNumeral.textContent = dateToDisplay;\n  currentDateNumeral.setAttribute(\"datetime\", `${currentYear}-${currentMonth}-${currentDay}`);\n  currentDateRoman.textContent = convertDateToRoman([currentDay, currentMonth, currentYear], \".\");\n  converterInput.value = currentDate.getDate();\n  resultConversion.textContent = convertToRoman(currentDay);\n};\n","import { converterInput, resultConversion } from \"./elements\";\nimport { convertToRoman, showInformation } from \"./utils\";\n\nexport const handleCloseButton = () => {\n  converterInput.value = \"\";\n  resultConversion.textContent = \"\";\n  showInformation(\"hidden\", true);\n};\n\nexport const handleUserTyping = (e) => {\n  let valueTyped = e.target.value;\n\n  if (valueTyped === \"\") {\n    showInformation(\"hidden\", true);\n    return;\n  } else if (/[^0-9]/g.test(valueTyped) || valueTyped.search(/^0/) != -1) {\n    valueTyped = valueTyped.replace(/^0|[^0-9]/g, \"\");\n    converterInput.value = valueTyped;\n    resultConversion.innerHTML = convertToRoman(valueTyped);\n    return;\n  }\n  showInformation(\"hidden\", false);\n  resultConversion.innerHTML = convertToRoman(valueTyped);\n};\n","import { converterInput, closeButton } from \"./elements\";\nimport { displayCurrentDate } from \"./utils\";\nimport { handleUserTyping, handleCloseButton } from \"./handlers\";\n\nfunction init() {\n  window.addEventListener(\"DOMContentLoaded\", displayCurrentDate());\n  converterInput.addEventListener(\"input\", handleUserTyping);\n  closeButton.addEventListener(\"click\", handleCloseButton);\n}\n\ninit();\n"],"names":["$fb4a1fb27e815b6d$export$cc831e2b8f035db8","document","querySelector","$fb4a1fb27e815b6d$export$efe229eab43a9869","$fb4a1fb27e815b6d$export$ea81851d0f3a5ece","$fb4a1fb27e815b6d$export$11adda2e71f84372","$fb4a1fb27e815b6d$export$917ffd224921699c","$fb4a1fb27e815b6d$export$3c59b82afc373ddf","$dd46cd1dd8498cc1$export$6a18268b18b7cbb0","$dd46cd1dd8498cc1$export$e2325d3ab16b4f07","$fe8af8a42c4a74bc$export$5430a6de97798637","date","arguments","length","String","$fe8af8a42c4a74bc$export$b8cec90b66a04688","stringDate","padStart","$fe8af8a42c4a74bc$export$692bab7acb986ec9","input","i","$fe8af8a42c4a74bc$export$504bc8f218c5ba4b","attribute","value","setAttribute","$fe8af8a42c4a74bc$export$6394d193279e0532","currentDate","Date","currentDay","getDate","currentMonth","getMonth","currentYear","getFullYear","dateToDisplay","textContent","delimiter","Array","isArray","j","concat","substring","$fe8af8a42c4a74bc$export$34a9c4abe76395cd","$d8a793c09f0bd7ed$export$2c1624af75a61faf","$d8a793c09f0bd7ed$export$104a981ebf912eff","e","valueTyped","target","test","search","replace","innerHTML","window","addEventListener"],"version":3,"file":"index.7ff2596d.js.map"}